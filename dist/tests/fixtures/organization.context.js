"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    '@context': {
        '@id': 'https://um.api.mediapeers.mobi/v20140601/context/organization',
        '@context': 'https://um.api.mediapeers.mobi/v20140601/context/context',
        '@type': 'context',
        properties: { id: { readable: true,
                writable: false,
                exportable: true,
                type: 'number' },
            access_level: { readable: true,
                writable: false,
                exportable: true,
                required: true,
                validations: [Array],
                type: 'string' },
            responsible_user_id: { readable: true,
                writable: false,
                exportable: true,
                type: 'number' },
            currency_id: { readable: true,
                writable: false,
                exportable: true,
                type: 'string' },
            language_id: { readable: true,
                writable: false,
                exportable: true,
                type: 'string' },
            geo_scope_ids: { readable: true,
                writable: true,
                exportable: true,
                type: 'array' },
            status: { readable: true,
                writable: false,
                exportable: true,
                type: 'string' },
            activated_at: { readable: true,
                writable: false,
                exportable: true,
                type: 'date' },
            created_at: { readable: true,
                writable: false,
                exportable: true,
                type: 'date' },
            updated_at: { readable: true,
                writable: false,
                exportable: true,
                type: 'date' },
            deleted_at: { readable: true,
                writable: false,
                exportable: true,
                type: 'date' },
            users_count: { readable: true,
                writable: false,
                exportable: true,
                type: 'number' },
            country_id: { readable: true,
                writable: false,
                exportable: true,
                type: 'string' },
            name: { readable: true,
                writable: true,
                exportable: true,
                required: true,
                validations: [Array],
                type: 'string' },
            email: { readable: true,
                writable: true,
                exportable: true,
                validations: [Array],
                type: 'string' },
            tags: { readable: true,
                writable: true,
                exportable: true,
                validations: [Array],
                type: 'array' },
            group_ids: { readable: false,
                writable: true,
                exportable: true,
                type: 'array' },
            external_reference: { readable: true,
                writable: true,
                exportable: true,
                validations: [Array],
                type: 'string' },
            classification: { readable: true,
                writable: true,
                exportable: true,
                required: true,
                validations: [Array],
                type: 'string' },
            legal_entity: { readable: true,
                writable: true,
                exportable: true,
                required: true,
                validations: [Array],
                type: 'string' },
            registration_number: { readable: true,
                writable: true,
                exportable: true,
                validations: [Array],
                type: 'string' },
            tax_number: { readable: true,
                writable: true,
                exportable: true,
                validations: [Array],
                type: 'string' },
            vat_number: { readable: true,
                writable: true,
                exportable: true,
                validations: [Array],
                type: 'string' },
            vat_rate: { readable: true,
                writable: true,
                exportable: true,
                validations: [Array],
                type: 'decimal' },
            withholding_tax_rate: { readable: true,
                writable: true,
                exportable: true,
                validations: [Array],
                type: 'decimal' },
            source_updated_at: { readable: true, writable: true, exportable: true, type: 'date' },
            geo_scopes: { type: 'https://um.api.mediapeers.mobi/v20140601/context/geo_scope',
                collection: true,
                readable: true,
                writable: true,
                exportable: true,
                validations: [Array] },
            responsible_user: { type: 'https://um.api.mediapeers.mobi/v20140601/context/user',
                collection: false,
                readable: true,
                writable: true,
                exportable: true },
            groups: { type: 'https://um.api.mediapeers.mobi/v20140601/context/group',
                collection: true,
                readable: true,
                writable: false,
                exportable: false },
            users: { type: 'https://um.api.mediapeers.mobi/v20140601/context/user',
                collection: true,
                readable: true,
                writable: true,
                exportable: false },
            aliases: { type: 'https://um.api.mediapeers.mobi/v20140601/context/organization/alias',
                collection: true,
                readable: true,
                writable: true,
                exportable: true,
                validations: [Array] },
            key_persons: { type: 'https://um.api.mediapeers.mobi/v20140601/context/organization/key_person',
                collection: true,
                readable: true,
                writable: true,
                exportable: true,
                validations: [Array] },
            phones: { type: 'https://um.api.mediapeers.mobi/v20140601/context/organization/phone',
                collection: true,
                readable: true,
                writable: true,
                exportable: true,
                validations: [Array] },
            im_contacts: { type: 'https://um.api.mediapeers.mobi/v20140601/context/organization/im_contact',
                collection: true,
                readable: true,
                writable: true,
                exportable: true,
                validations: [Array] },
            social_media_profiles: { type: 'https://um.api.mediapeers.mobi/v20140601/context/organization/social_media_profile',
                collection: true,
                readable: true,
                writable: true,
                exportable: true,
                validations: [Array] },
            urls: { type: 'https://um.api.mediapeers.mobi/v20140601/context/organization/url',
                collection: true,
                readable: true,
                writable: true,
                exportable: true,
                validations: [Array] },
            addresses: { type: 'https://um.api.mediapeers.mobi/v20140601/context/organization/address',
                collection: true,
                readable: true,
                writable: true,
                exportable: true,
                validations: [Array] },
            legal_address: { type: 'https://um.api.mediapeers.mobi/v20140601/context/organization/address',
                collection: false,
                readable: true,
                writable: true,
                exportable: true },
            country: { type: 'https://um.api.mediapeers.mobi/v20140601/context/geography',
                collection: false,
                readable: true,
                writable: false,
                exportable: false },
            bank_accounts: { type: 'https://um.api.mediapeers.mobi/v20140601/context/organization/bank_account',
                collection: true,
                readable: true,
                writable: true,
                exportable: true,
                validations: [Array] },
            courier_services: { type: 'https://um.api.mediapeers.mobi/v20140601/context/organization/courier_service',
                collection: true,
                readable: true,
                writable: true,
                exportable: true,
                validations: [Array] },
            currency: { type: 'https://um.api.mediapeers.mobi/v20140601/context/currency',
                collection: false,
                readable: true,
                writable: true,
                exportable: false },
            language: { type: 'https://um.api.mediapeers.mobi/v20140601/context/language',
                collection: false,
                readable: true,
                writable: true,
                exportable: false },
            delivery_profiles: { type: 'https://am.api.mediapeers.mobi/v20140601/context/delivery_profile',
                collection: true,
                readable: true,
                writable: false,
                exportable: false } },
        constants: { access_levels: ['company', 'viewable'],
            legal_entities: ['Cooperative',
                'Corporation',
                'General partnership',
                'Government',
                'Intergovernmental organization',
                'Limited liability company',
                'Limited (liability) partnership',
                'Nonprofit organization',
                'Non-govermental organization',
                'Public insitution',
                'Sole proprietorship',
                'Other'],
            classifications: ['Archive',
                'Cable/MSO',
                'Cinema operator',
                'Commercial broadcaster',
                'Distributor',
                'Film studio',
                'Home Entertainment',
                'Indepenet production',
                'Intermediary',
                'Mobile operator',
                'Nonprofit organization',
                'OEM',
                'Other media company',
                'Pay-TV',
                'Public service broadcaster',
                'Telco/ISP',
                'Theatrical distributor',
                'Web site',
                'Other'],
            status: ['inactive', 'active', 'deleting', 'deleted', 'recovering'] },
        member_actions: { get: { method: 'GET',
                expects: null,
                resource: 'https://um.api.mediapeers.mobi/v20140601/context/organization',
                response: 'https://um.api.mediapeers.mobi/v20140601/context/organization',
                template: 'https://um.api.mediapeers.mobi/v20140601/organization/{organization_id}',
                mappings: [{ variable: 'organization_id', source: 'id', required: true }] },
            update: { method: 'PATCH',
                expects: 'https://um.api.mediapeers.mobi/v20140601/context/organization',
                resource: 'https://um.api.mediapeers.mobi/v20140601/context/organization',
                response: 'https://um.api.mediapeers.mobi/v20140601/context/organization',
                template: 'https://um.api.mediapeers.mobi/v20140601/organization/{organization_id}',
                mappings: [{ variable: 'organization_id', source: 'id', required: true }] },
            delete: { method: 'DELETE',
                expects: null,
                resource: 'https://um.api.mediapeers.mobi/v20140601/context/organization',
                response: 'https://um.api.mediapeers.mobi/v20140601/context/organization',
                template: 'https://um.api.mediapeers.mobi/v20140601/organization/{organization_id}',
                mappings: [{ variable: 'organization_id', source: 'id', required: true }] },
            restore: { method: 'PUT',
                expects: null,
                resource: 'https://um.api.mediapeers.mobi/v20140601/context/organization',
                response: 'https://um.api.mediapeers.mobi/v20140601/context/organization',
                template: 'https://um.api.mediapeers.mobi/v20140601/organization/{organization_id}/restore',
                mappings: [{ variable: 'organization_id', source: 'id', required: true }] },
            add_geo_scopes: { method: 'POST',
                expects: null,
                resource: 'https://um.api.mediapeers.mobi/v20140601/context/organization',
                response: 'https://um.api.mediapeers.mobi/v20140601/context/organization',
                template: 'https://um.api.mediapeers.mobi/v20140601/organizations/{organization_id}/geo_scopes/{geo_scope_ids}/add',
                mappings: [{ variable: 'organization_id', source: 'id', required: true }] },
            remove_geo_scopes: { method: 'DELETE',
                expects: null,
                resource: 'https://um.api.mediapeers.mobi/v20140601/context/organization',
                response: 'https://um.api.mediapeers.mobi/v20140601/context/organization',
                template: 'https://um.api.mediapeers.mobi/v20140601/organizations/{organization_id}/geo_scopes/{geo_scope_ids}/remove',
                mappings: [Array] },
            update_geo_scopes: { method: 'PUT',
                expects: null,
                resource: 'https://um.api.mediapeers.mobi/v20140601/context/organization',
                response: 'https://um.api.mediapeers.mobi/v20140601/context/organization',
                template: 'https://um.api.mediapeers.mobi/v20140601/organizations/{organization_id}/geo_scopes/{geo_scope_ids}',
                mappings: [Array] },
            query_users: { method: 'GET',
                expects: null,
                resource: 'https://um.api.mediapeers.mobi/v20140601/context/organization',
                response: 'https://um.api.mediapeers.mobi/v20140601/context/organization',
                template: 'https://um.api.mediapeers.mobi/v20140601/organizations/{organization_id}/users{?ids,q,qfields,page,per,sort,order,include_deleted}',
                mappings: [Array] },
            query_groups: { method: 'GET',
                expects: null,
                resource: 'https://um.api.mediapeers.mobi/v20140601/context/organization',
                response: 'https://um.api.mediapeers.mobi/v20140601/context/organization',
                template: 'https://um.api.mediapeers.mobi/v20140601/organizations/{organization_id}/groups{?ids,q,qfields,page,per,sort,order,include_deleted}',
                mappings: [Array] } },
        collection_actions: { query: { method: 'GET',
                expects: null,
                resource: 'https://um.api.mediapeers.mobi/v20140601/context/organization',
                response: 'https://um.api.mediapeers.mobi/v20140601/context/collection',
                template: 'https://um.api.mediapeers.mobi/v20140601/organizations{?ids,q,qfields,per,page,sort,order,include_deleted}',
                mappings: [Array] },
            create: { method: 'POST',
                expects: 'https://um.api.mediapeers.mobi/v20140601/context/organization',
                resource: 'https://um.api.mediapeers.mobi/v20140601/context/organization',
                response: 'https://um.api.mediapeers.mobi/v20140601/context/organization',
                template: 'https://um.api.mediapeers.mobi/v20140601/organizations',
                mappings: [] },
            get: { method: 'GET',
                expects: null,
                resource: 'https://um.api.mediapeers.mobi/v20140601/context/organization',
                response: 'https://um.api.mediapeers.mobi/v20140601/context/collection',
                template: 'https://um.api.mediapeers.mobi/v20140601/organizations/{organization_ids}',
                mappings: [{ variable: 'organization_ids', source: 'id', required: true }] },
            update: { method: 'PATCH',
                expects: 'https://um.api.mediapeers.mobi/v20140601/context/organization',
                resource: 'https://um.api.mediapeers.mobi/v20140601/context/organization',
                response: 'https://um.api.mediapeers.mobi/v20140601/context/collection',
                template: 'https://um.api.mediapeers.mobi/v20140601/organizations/{organization_ids}',
                mappings: [{ variable: 'organization_ids', source: 'id', required: true }] },
            delete: { method: 'DELETE',
                expects: null,
                resource: 'https://um.api.mediapeers.mobi/v20140601/context/organization',
                response: 'https://um.api.mediapeers.mobi/v20140601/context/collection',
                template: 'https://um.api.mediapeers.mobi/v20140601/organizations/{organization_ids}',
                mappings: [{ variable: 'organization_ids', source: 'id', required: true }] },
            restore: { method: 'PUT',
                expects: null,
                resource: 'https://um.api.mediapeers.mobi/v20140601/context/organization',
                response: 'https://um.api.mediapeers.mobi/v20140601/context/collection',
                template: 'https://um.api.mediapeers.mobi/v20140601/organizations/{organization_ids}/restore',
                mappings: [{ variable: 'organization_ids', source: 'id', required: true }] },
            query_users: { method: 'GET',
                expects: null,
                resource: 'https://um.api.mediapeers.mobi/v20140601/context/organization',
                response: 'https://um.api.mediapeers.mobi/v20140601/context/collection',
                template: 'https://um.api.mediapeers.mobi/v20140601/organizations/{organization_ids}/users{?ids,q,page,per,sort,order,include_deleted}',
                mappings: [{ variable: 'organization_ids', source: 'id', required: true }] } },
        action: [Function],
        associations: { geo_scopes: { type: 'https://um.api.mediapeers.mobi/v20140601/context/geo_scope',
                collection: true,
                readable: true,
                writable: true,
                exportable: true,
                validations: [Array] },
            responsible_user: { type: 'https://um.api.mediapeers.mobi/v20140601/context/user',
                collection: false,
                readable: true,
                writable: true,
                exportable: true },
            groups: { type: 'https://um.api.mediapeers.mobi/v20140601/context/group',
                collection: true,
                readable: true,
                writable: false,
                exportable: false },
            users: { type: 'https://um.api.mediapeers.mobi/v20140601/context/user',
                collection: true,
                readable: true,
                writable: true,
                exportable: false },
            aliases: { type: 'https://um.api.mediapeers.mobi/v20140601/context/organization/alias',
                collection: true,
                readable: true,
                writable: true,
                exportable: true,
                validations: [Array] },
            key_persons: { type: 'https://um.api.mediapeers.mobi/v20140601/context/organization/key_person',
                collection: true,
                readable: true,
                writable: true,
                exportable: true,
                validations: [Array] },
            phones: { type: 'https://um.api.mediapeers.mobi/v20140601/context/organization/phone',
                collection: true,
                readable: true,
                writable: true,
                exportable: true,
                validations: [Array] },
            im_contacts: { type: 'https://um.api.mediapeers.mobi/v20140601/context/organization/im_contact',
                collection: true,
                readable: true,
                writable: true,
                exportable: true,
                validations: [Array] },
            social_media_profiles: { type: 'https://um.api.mediapeers.mobi/v20140601/context/organization/social_media_profile',
                collection: true,
                readable: true,
                writable: true,
                exportable: true,
                validations: [Array] },
            urls: { type: 'https://um.api.mediapeers.mobi/v20140601/context/organization/url',
                collection: true,
                readable: true,
                writable: true,
                exportable: true,
                validations: [Array] },
            addresses: { type: 'https://um.api.mediapeers.mobi/v20140601/context/organization/address',
                collection: true,
                readable: true,
                writable: true,
                exportable: true,
                validations: [Array] },
            legal_address: { type: 'https://um.api.mediapeers.mobi/v20140601/context/organization/address',
                collection: false,
                readable: true,
                writable: true,
                exportable: true },
            country: { type: 'https://um.api.mediapeers.mobi/v20140601/context/geography',
                collection: false,
                readable: true,
                writable: false,
                exportable: false },
            bank_accounts: { type: 'https://um.api.mediapeers.mobi/v20140601/context/organization/bank_account',
                collection: true,
                readable: true,
                writable: true,
                exportable: true,
                validations: [Array] },
            courier_services: { type: 'https://um.api.mediapeers.mobi/v20140601/context/organization/courier_service',
                collection: true,
                readable: true,
                writable: true,
                exportable: true,
                validations: [Array] },
            currency: { type: 'https://um.api.mediapeers.mobi/v20140601/context/currency',
                collection: false,
                readable: true,
                writable: true,
                exportable: false },
            language: { type: 'https://um.api.mediapeers.mobi/v20140601/context/language',
                collection: false,
                readable: true,
                writable: true,
                exportable: false },
            delivery_profiles: { type: 'https://am.api.mediapeers.mobi/v20140601/context/delivery_profile',
                collection: true,
                readable: true,
                writable: false,
                exportable: false } }
    }
};
//# sourceMappingURL=organization.context.js.map